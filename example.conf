
http {

    # set retry when find a error backend
    proxy_next_upstream error timeout http_502 http_503 http_504;
    proxy_next_upstream_tries 2;

    lua_socket_log_errors off;
    # use nginx shared memory for upstream
    lua_shared_dict your_shared_name 1m;
    init_worker_by_lua_block {
        local syncer = require "lreu.syncer"
        syncer.init({
            etcd_host = "127.0.0.1",
            etcd_port = 2379,
            etcd_path = "/v1/testing/services/",
            storage = ngx.shared.your_shared_name
        })

        -- init the picker with the shared storage(read only)
        local picker = require "lreu.picker"
        picker.init(ngx.shared.your_shared_name)

        -- local logger = require "lreu.logger"
        -- logger.init(ngx.shared.lreu_logger, 60, ngx.shared.lreu_upstream)

        -- local logger_api = require "lreu.logger_api"
        -- logger_api.init(ngx.shared.lreu_logger_api, 70)

        -- local health = require "lreu.health"
        -- health.init({
        --     storage = ngx.shared.lreu_upstream,
        --     healthcheck = {
        --         enable = true,
        --         timeout = 3,
        --         interval = 5,
        --         max_fails = 3,
        --         ok_status = {200, 204, 301, 302, 401, 403, 404}
        --     },
        --     logcheck = {
        --         enable = true,
        --         interval = 5,
        --         recover = 60
        --     }
        -- })
    }

    upstream dynamic-upstream {
        # fake server, and use it when cannot find real-server
        server 127.0.0.1:2222;

        # use balancer_by_lua_block for generate dynamic upstream
        #
        # just use it!
        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local picker = require "lreu.picker"
            local json = require "cjson"
            local name = ngx.var.backname

            if not name then
                assert(balancer.set_current_peer("127.0.0.1", 2222))
                return
            end

            last_state_name, last_status_code = balancer.get_last_failure()

            local s, err = picker.rr(name, last_state_name)
            -- ngx.log(ngx.ERR, json.encode(s))
            if not s then
                assert(balancer.set_current_peer("127.0.0.1", 2222))
                return
            end

            if not ngx.ctx.tries then
                ngx.ctx.tries = 0
            end

            if ngx.ctx.tries < 2 then
                local ok, err = balancer.set_more_tries(1)
                if not ok then
                    return error("failed to set more tries: ", err)
                elseif err then
                    ngx.log(ngx.WARN, "set more tries: ", err)
                end
            end

            ngx.ctx.tries = ngx.ctx.tries + 1

            assert(balancer.set_current_peer(s.host, s.port))
        }

        keepalive 30;
    }

    server {
        listen 80 default_server;
        server_name _;

        location / {
            # backname like old "upstream_name"
            set $backname "your_upstream_name"

            proxy_set_header Host $http_host;
            # all upstream use "dynamic-upstream"
            proxy_pass http://dynamic-upstream;
        }

        # get upstream from lua, use like this:
        #
        # curl http://localhost/get_upstream?svcname=your_upstream_name
        location /get_upstream {
            content_by_lua_block {
                local picker = require "dyups.picker"
                local json = require "cjson"
                local name = ngx.var.arg_svcname
                local all = picker.show(name)
                ngx.say(json.encode(all))
            }
        }

        # get upstream from ngx.shared, use like this:
        #
        # curl http://localhost/get_shm?svcname=your_upstream_name
        location /get_shm {
            content_by_lua_block {
                local dict = ngx.shared.your_shared_name
                local name = ngx.var.arg_svcname
                ngx.say(dict:get(name .. "|peers"))
            }
        }
    }

    server {
        # set fake server to return 502
        listen 127.0.0.1:2222 default_server;
        server_name _;
        access_log off;

        location / {
            return 502 'LUA dynamic-upstream: No backend found.';
        }
    }
}
